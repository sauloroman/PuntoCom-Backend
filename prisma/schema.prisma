generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Product {
  product_id           String   @id @default(uuid())
  product_name         String   @unique
  product_description  String   @default("Producto sin descripción")
  product_image        String   @default("Producto sin imagen")
  product_code         String   @unique
  product_image_code   String
  product_selling_price Decimal @db.Decimal(11, 2)
  product_stock        Int
  product_stock_min    Int
  product_createdAt    DateTime @default(now())
  product_updatedAt    DateTime @updatedAt
  product_is_active    Boolean  @default(true)
  category_id          String
  supplier_id          String

  Category             Category @relation(fields: [category_id], references: [category_id])
  Supplier             Supplier @relation(fields: [supplier_id], references: [supplier_id])
  PurchaseDetails      Purchase_Detail[]
  SaleProductDetails   Sale_Product_Detail[]
  InventoryAdjustments Inventory_Adjustment[]
}

model Category {
  category_id          String   @id @default(uuid())
  category_name        String   @unique
  category_description String   @default("Categoría sin descripción")
  category_icon        String   @default("Categoría sin ícono")
  category_is_active   Boolean  @default(true)
  category_createdAt   DateTime @default(now())
  category_updatedAt   DateTime @updatedAt

  Products             Product[]
}

model Supplier {
  supplier_id         String   @id @default(uuid())
  supplier_name       String
  supplier_lastname   String
  supplier_company    String   
  supplier_phone      String   @default("Proveedor sin teléfono")
  supplier_email      String   @unique @default("Proveedor sin correo")
  supplier_address    String   @default("Proveedor sin dirección")
  supplier_is_active  Boolean  @default(true)
  supplier_createdAt  DateTime @default(now())
  supplier_updatedAt  DateTime @updatedAt

  Purchases           Purchase[]
  Products            Product[]
}

model Purchase {
  purchase_id     String   @id @default(uuid())
  purchase_date   DateTime @default(now())
  purchase_total  Decimal  @db.Decimal(11, 2)
  supplier_id     String
  user_id         String

  Supplier        Supplier @relation(fields: [supplier_id], references: [supplier_id])
  User            User     @relation(fields: [user_id], references: [user_id])
  PurchaseDetails Purchase_Detail[]
}

model Purchase_Detail {
  purchase_detail_id   String  @id @default(uuid())
  purchase_quantity    Int
  purchase_unit_price  Decimal @db.Decimal(11, 2)
  product_id           String
  purchase_id          String

  Product              Product  @relation(fields: [product_id], references: [product_id])
  Purchase             Purchase @relation(fields: [purchase_id], references: [purchase_id])
}

model Sale {
  sale_id       String   @id @default(uuid())
  sale_date     DateTime @default(now())
  sale_total    Decimal  @db.Decimal(11, 2)
  user_id       String

  User          User     @relation(fields: [user_id], references: [user_id])
  SaleProductDetails Sale_Product_Detail[]
}

model Sale_Product_Detail {
  sale_product_detail_id          String  @id @default(uuid())
  sale_product_detail_quantity    Int
  sale_product_detail_unit_price  Decimal @db.Decimal(11, 2)
  sale_product_discount           Decimal @db.Decimal(11, 2) @default(0.0)
  sale_id                         String
  product_id                      String

  Sale          Sale    @relation(fields: [sale_id], references: [sale_id])
  Product       Product @relation(fields: [product_id], references: [product_id])
}

model User {
  user_id            String   @id @default(uuid())
  user_name          String
  user_lastname      String
  user_image         String   @default("Usuario sin imagen")
  user_email         String   @unique
  user_password      String
  user_is_active     Boolean  @default(true)
  user_createdAt     DateTime @default(now())
  user_updatedAt     DateTime @updatedAt
  user_is_validated  Boolean  @default(false)
  user_phone         String   @default("Usuario sin numero")
  role               RoleEnum

  Purchases          Purchase[]
  Sales              Sale[]
  InventoryAdjustments Inventory_Adjustment[]
  VerificationCodes  VerificationCode[]
  PasswordResetCodes PasswordResetCode[]
}

model VerificationCode {
  verification_id String   @id @default(uuid())
  code            String   @unique
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  user_id         String

  user            User     @relation(fields: [user_id], references: [user_id])
}

model PasswordResetCode {
  reset_id     String   @id @default(uuid())
  code         String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user_id      String

  user         User     @relation(fields: [user_id], references: [user_id])
}

enum RoleEnum {
  Administrador
  Supervisor
  Vendedor
}

model Inventory_Adjustment {
  adjustment_id       String   @id @default(uuid())
  product_id          String
  adjustment_type     AdjustmentType
  adjustment_quantity Int
  adjustment_reason   String
  user_id             String
  adjustment_date     DateTime @default(now())

  Product             Product  @relation(fields: [product_id], references: [product_id])
  User                User     @relation(fields: [user_id], references: [user_id])
}

enum AdjustmentType {
  entrada
  salida
}
